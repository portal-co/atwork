{"mappings":"AACA;CAAgC;AAChC,wBAAwB;IAAE,MAAM,CAAC,EAAE,GAAG,CAAC;IAAC,MAAM,CAAC,EAAE,UAAU,EAAE,CAAA;CAAE,CAAC;AAChE,sBACE,IAAI,EAAE,UAAU,EAAE,EAClB,EACE,MAAmB,EACnB,MAA4B,GAC7B,GAAE,SAAc,GAChB,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAYrC;AACD,uBACE,OAAO,EAAE,UAAU,EACnB,QAAQ,EAAE,YAAY,EACtB,EACE,MAAmB,EACnB,MAA+B,EAC/B,cAAsC,GACvC,GAAE,SAAS,GAAG;IACb,cAAc,CAAC,EAAE,OAAO,OAAO,cAAc,CAAC;CAC1C,QAWP","sources":["js/js/index.ts","js/index.ts"],"sourcesContent":[null,"import { slh_dsa_shake_256s } from \"@noble/post-quantum/slh-dsa.js\";\nexport interface WorkProvider {}\nexport type AtWorkCtx = { window?: any; atwork?: Uint8Array[] };\nexport function* crawl(\n  keys: Uint8Array[],\n  {\n    window = globalThis,\n    atwork = window.atwork ?? [],\n  }: AtWorkCtx = {}\n): Generator<WorkProvider, void, void> {\n  for (const w of atwork) {\n    const msg = w.subarray(slh_dsa_shake_256s.lengths.signature);\n    const sig = w.subarray(0, slh_dsa_shake_256s.lengths.signature);\n    a: for (const k of keys) {\n      if (slh_dsa_shake_256s.verify(sig, msg, k)) {\n        const decoded = new TextDecoder().decode(msg);\n        if (decoded in window) yield window[decoded];\n        break a;\n      }\n    }\n  }\n}\nexport function inject(\n  payload: Uint8Array,\n  provider: WorkProvider,\n  {\n    window = globalThis,\n    atwork = (window.atwork ??= []),\n    defineProperty = Object.defineProperty,\n  }: AtWorkCtx & {\n    defineProperty?: typeof Object.defineProperty;\n  } = {}\n) {\n  const msg = payload.subarray(slh_dsa_shake_256s.lengths.signature);\n  atwork.push(payload);\n  const decoded = new TextDecoder().decode(msg);\n  defineProperty(window, decoded, {\n    value: provider,\n    writable: false,\n    enumerable: false,\n    configurable: false,\n  });\n}\n"],"names":[],"version":3,"file":"index.d.ts.map"}